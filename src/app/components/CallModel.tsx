import React, { useEffect, useState, useRef } from 'react';
import {
  LiveKitRoom,
  useRoomContext,
  useTracks,
} from '@livekit/components-react';
import { Track } from 'livekit-client';
import '@livekit/components-styles';
import { AudioDebug } from './AudioDebug';
import styled from 'styled-components';
import Avatar from './Avatar';



const Container = styled(LiveKitRoom)`
	display:flex;
	background:transparent;
	flex-direction:column;
	justify-content:space-between;
	align-items:center;
	height:100%;
`

// üîä –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
const AudioTracks = () => {
  // –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ-—Ç—Ä–µ–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∫—Ä–æ–º–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ)
  const tracks = useTracks([Track.Source.Microphone]);

  return (
    <>
      {tracks.map(trackRef => (
        <AudioPlayer key={trackRef.publication.trackSid} track={trackRef.publication.track} />
      ))}
    </>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–∫–ª—é—á–∞–µ—Ç –∞—É–¥–∏–æ—Ç—Ä–µ–∫ –∫ <audio>
const AudioPlayer = ({ track }) => {
  const audioRef = useRef(null);

  useEffect(() => {
    if (!track || !audioRef.current) return;

    const el = audioRef.current;
    // –°–æ–∑–¥–∞—ë–º MediaStream –∏–∑ MediaStreamTrack –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É <audio>
    el.srcObject = new MediaStream([track.mediaStreamTrack]);
    el.play().catch(() => {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞, –±—Ä–∞—É–∑–µ—Ä—ã –º–æ–≥—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
    });

    return () => {
      el.srcObject = null;
    };
  }, [track]);

  return <audio ref={audioRef} autoPlay controls={false} />;
};

// üéõ –ö–æ–Ω—Ç—Ä–æ–ª—ã –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∏ –∫–∞–º–µ—Ä—ã
const Controls = () => {
  const { localParticipant } = useRoomContext();

  const toggleAudio = () => {
    const enabled = !localParticipant.isMicrophoneEnabled;
    localParticipant.setMicrophoneEnabled(enabled);
    console.log(`üéô –ú–∏–∫—Ä–æ—Ñ–æ–Ω: ${enabled ? '–í–∫–ª—é—á–µ–Ω' : '–í—ã–∫–ª—é—á–µ–Ω'}`);
  };

  const toggleVideo = () => {
    const enabled = !localParticipant.isCameraEnabled;
    localParticipant.setCameraEnabled(enabled);
    console.log(`üì∑ –ö–∞–º–µ—Ä–∞: ${enabled ? '–í–∫–ª—é—á–µ–Ω–∞' : '–í—ã–∫–ª—é—á–µ–Ω–∞'}`);
  };

  return (
    <div style={{ marginBottom: 10 }}>
      <button onClick={toggleAudio}>üéô –ú–∏–∫—Ä–æ—Ñ–æ–Ω –í–∫–ª/–í—ã–∫–ª</button>
      <button onClick={toggleVideo} style={{ marginLeft: 10 }}>üì∑ –ö–∞–º–µ—Ä–∞ –í–∫–ª/–í—ã–∫–ª</button>
    </div>
  );
};

// üìü –õ–æ–≥ —Å–æ–±—ã—Ç–∏–π –∫–æ–º–Ω–∞—Ç—ã
const RoomEventsLogger = () => {
  const room = useRoomContext();

  useEffect(() => {
    const handleParticipantConnected = (participant) => {
      console.log('üë§ –£—á–∞—Å—Ç–Ω–∏–∫ –≤–æ—à—ë–ª:', participant.identity);
    };

    const handleParticipantDisconnected = (participant) => {
      console.log('‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –≤—ã—à–µ–ª:', participant.identity);
    };

    room.on('participantConnected', handleParticipantConnected);
    room.on('participantDisconnected', handleParticipantDisconnected);

    return () => {
      room.off('participantConnected', handleParticipantConnected);
      room.off('participantDisconnected', handleParticipantDisconnected);
    };
  }, [room]);

  return null;
};

// üöÄ –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–≤–æ–Ω–∫–∞
const CallModel = () => {
  const [token, setToken] = useState<string | null>(null);
  const [started, setStarted] = useState(false);

  const roomName = 'myroom';
  const identity = 'user1'; // –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è

  const startCall = async () => {
    const res = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL}/livekit/token?identity=${identity}&room=${roomName}`);
    const data = await res.json();
    setToken(data.token);
    setStarted(true);
  };

  if (!started) return <button onClick={startCall}>üìû –ù–∞—á–∞—Ç—å –∑–≤–æ–Ω–æ–∫</button>;
  if (!token) return <div>‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...</div>;

  return (
    <Container
      token={token}
      serverUrl="ws://localhost:7880"
      connect={true}
      video={false}  // –ö–∞–º–µ—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞
      audio={true}   // –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á—ë–Ω
      onConnected={() => console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –∫–æ–º–Ω–∞—Ç–µ")}
      onDisconnected={() => console.log("üö´ –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç –∫–æ–º–Ω–∞—Ç—ã")}
      data-lk-theme="default"
    >
		<Avatar size='320px'/>
      <RoomEventsLogger />
      <AudioDebug />
      <Controls />
      <AudioTracks />
    </Container>
  );
};

export default CallModel;
